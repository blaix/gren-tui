module Main exposing (main)


import Ansi
import Init
import Node
import Set exposing (Set)
import Stream exposing (Stream)
import Task
import Tui
import UI
import UI.Attribute as Attribute exposing (Attribute)
import UI.Border as Border


main : Tui.Program Model Msg
main =
    Tui.defineProgram
        { init = init
        , update = update
        , view = view
        , subscriptions = subscriptions
        , onInput = GotInput
        }


type alias Model =
    { stdout : Stream
    , width : Int
    , height : Int
    , maxHeight : Int
    , visited : Set (Array Int)
    , position : Point
    }


type alias Point =
    { x : Int, y : Int }


init : Tui.Environment -> Init.Task { model : Model, command : Cmd Msg }
init env =
    Node.startProgram
        { model = 
            { stdout = env.stdout 
            , width = env.columns
            , height = 1
            , maxHeight = env.rows
            , visited = Set.fromArray [[0, 0]]
            , position = { x = 0, y = 0 }
            }
        , command = 
            Tui.hideCursor env.stdout
                |> Task.execute
        }


type Msg
    = GotInput Tui.Input


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        GotInput input ->
            case input of
                Tui.Escape ->
                    { model = model
                    , command = 
                        Tui.exit model.stdout
                            |> Task.execute
                    }

                Tui.ArrowUp ->
                    let
                        newY =
                            if model.position.y > 0 then
                                model.position.y - 1
                            else
                                model.position.y

                        position =
                            { x = model.position.x, y = newY }

                    in
                    { model =
                        { model 
                            | position = position
                            , visited = pushVisited position model
                        }
                    , command =
                        Cmd.none
                    }

                Tui.ArrowDown ->
                    let
                        newY =
                            if model.position.y < model.maxHeight - 1 then
                                model.position.y + 1
                            else
                                model.position.y

                        newHeight =
                            if newY == model.height then
                                model.height + 1
                            else
                                model.height

                        position =
                            { x = model.position.x, y = newY }
                    in
                    { model =
                        { model
                            | position = position
                            , height = newHeight
                            , visited = pushVisited position model
                        }
                    , command =
                        Cmd.none
                    }

                Tui.ArrowRight ->
                    let
                        newX =
                            if model.position.x < model.width - 1 then
                                model.position.x + 1
                            else
                                model.position.x

                        position =
                            { x = newX, y = model.position.y }
                    in
                    { model =
                        { model 
                            | position = position
                            , visited = pushVisited position model
                        }
                    , command =
                        Cmd.none
                    }

                Tui.ArrowLeft ->
                    let
                        newX =
                            if model.position.x > 0 then
                                model.position.x - 1
                            else
                                model.position.x

                        position =
                            { x = newX, y = model.position.y }
                    in
                    { model =
                        { model 
                            | position = position
                            , visited = pushVisited position model
                        }
                    , command =
                        Cmd.none
                    }

                _ ->
                    { model = model
                    , command = Cmd.none
                    }


pushVisited : Point -> Model -> Set (Array Int)
pushVisited point model =
    Set.set [point.x, point.y] model.visited


visited : Point -> Model -> Bool
visited point model =
    let
        comparablePoint =
            [point.x, point.y]
    in
    Set.member comparablePoint model.visited


view : Model -> String
view model =
    UI.toString <|
        UI.charGrid 
            [ Attribute.color Ansi.Black 
            , Attribute.fontWeight Ansi.Bold
            ] <|
                Array.initialize model.height 0 <| \y ->
                    Array.initialize model.width 0 <| \x ->
                        let
                            point = { x = x, y = y }

                            bgColor =
                                if visited point model then
                                    Ansi.Yellow
                                else
                                    Ansi.NoColor

                            cursor =
                                if point == model.position then
                                    '+'
                                else
                                    ' '
                        in
                        { char = cursor
                        , attrs =
                            [ Attribute.bgColor bgColor ] 
                        }


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none
