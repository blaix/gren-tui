module Main exposing (main)


import Ansi
import Init
import Node
import Stream exposing (Stream)
import Task
import Tui
import UI
import UI.Attribute as Attribute exposing (Attribute)
import UI.Border as Border


main : Tui.Program Model Msg
main =
    Tui.defineProgram
        { init = init
        , update = update
        , view = view
        , subscriptions = subscriptions
        , onInput = GotInput
        }


type alias Model =
    { stdout : Stream
    , selectedRow : Int
    , selectedColumn : Int
    }


type alias Point =
    { x : Int, y : Int }


init : Tui.Environment -> Init.Task { model : Model, command : Cmd Msg }
init env =
    Node.startProgram
        { model = 
            { stdout = env.stdout 
            , selectedRow = 1
            , selectedColumn = 1
            }
        , command = 
            Tui.hideCursor env.stdout
                |> Task.execute
        }


type Msg
    = GotInput Tui.Input


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        GotInput input ->
            case input of
                Tui.Escape ->
                    { model = model
                    , command = 
                        Tui.exit model.stdout
                            |> Task.execute
                    }

                Tui.ArrowUp ->
                    { model =
                        { model
                            | selectedRow =
                                if model.selectedRow > 1 then
                                    model.selectedRow - 1
                                else
                                    model.selectedRow
                        }
                    , command =
                        Cmd.none
                    }

                Tui.ArrowDown ->
                    { model =
                        { model
                            | selectedRow =
                                if model.selectedRow < 3 then
                                    model.selectedRow + 1
                                else
                                    model.selectedRow
                        }
                    , command =
                        Cmd.none
                    }

                Tui.ArrowRight ->
                    { model =
                        { model
                            | selectedColumn =
                                if model.selectedColumn < 2 then
                                    model.selectedColumn + 1
                                else
                                    model.selectedColumn
                        }
                    , command =
                        Cmd.none
                    }

                Tui.ArrowLeft ->
                    { model =
                        { model
                            | selectedColumn =
                                if model.selectedColumn > 1 then
                                    model.selectedColumn - 1
                                else
                                    model.selectedColumn
                        }
                    , command =
                        Cmd.none
                    }

                _ ->
                    { model = model
                    , command = Cmd.none
                    }


view : Model -> UI.Element
view model =
    UI.row  []
        [ UI.bordered [] Border.rounded <|
            UI.column []
                [ UI.text [] " Column 1 "
                , UI.text [] "──────────"
                , UI.text ( attributes { col = 1, row = 1 } model ) " cool"
                , UI.text ( attributes { col = 1, row = 2 } model ) " rad"
                , UI.text ( attributes { col = 1, row = 3 } model ) " neat"
                ]
        , UI.bordered [] Border.rounded <|
            UI.column []
                [ UI.text [] " Column 2 "
                , UI.text [] "──────────"
                , UI.text ( attributes { col = 2, row = 1 } model ) " whoa"
                , UI.text ( attributes { col = 2, row = 2 } model ) " hey"
                , UI.text ( attributes { col = 2, row = 3 } model ) " nice"
                ]
        ]


attributes : { col : Int, row : Int } -> Model -> Array Attribute
attributes { col, row } model =
    if col == model.selectedColumn && row == model.selectedRow then
        [ Attribute.bgColor Ansi.White
        , Attribute.color Ansi.Black
        ]

    else
        []


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none
