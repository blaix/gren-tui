module Main exposing (main)


import Ansi
import Array2d exposing (Array2d)
import Init
import Node
import Stream exposing (Stream)
import Task
import Tui


main : Tui.Program Model Msg
main =
    Tui.defineProgram
        { init = init
        , update = update
        , view = view
        , subscriptions = subscriptions
        , onInput = GotInput
        }


type alias Model =
    { x : Int
    , y : Int
    , stdout : Stream
    , board : Array2d String
    , score : Int
    , gameOver : Bool
    }


init : Node.Environment -> Init.Task { model : Model, command : Cmd Msg }
init env =
    Node.startProgram
        { model = 
            { x = 8
            , y = 5
            , stdout = env.stdout
            , board = initBoard
            , score = 0
            , gameOver = False
            }
        , command = Cmd.none
        }


type Msg
    = GotInput Tui.Input


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        GotInput input ->
            case input of
                Tui.KeyChar "q" ->
                    { model = model
                    , command = 
                        Stream.sendString model.stdout Ansi.showCursor
                            |> Task.andThen (\_ -> Node.exit)
                            |> Task.execute
                    }

                Tui.ArrowLeft ->
                    { model = 
                        model |> moveTo (model.x - 1) model.y
                    , command = Cmd.none
                    }

                Tui.ArrowRight ->
                    { model =
                        model |> moveTo (model.x + 1) model.y
                    , command = Cmd.none
                    }

                Tui.ArrowUp ->
                    { model =
                        model |> moveTo model.x (model.y - 1)
                    , command = Cmd.none
                    }

                Tui.ArrowDown ->
                    { model =
                        model |> moveTo model.x (model.y + 1)
                    , command = Cmd.none
                    }

                _ ->
                    { model = model
                    , command = Cmd.none
                    }


moveTo : Int -> Int -> Model -> Model
moveTo x y model =
    let
        cell =
            model.board
                |> Array2d.get { x = x, y = y }
                |> Maybe.withDefault ""
    in
    if model.gameOver then
        model
    else if cell == " " then
        { model
            | x = x
            , y = y
        }
    else if cell == "*" then
        { model
            | x = x
            , y = y
            , score = model.score + 1
            , board =
                model.board
                    |> Array2d.set { x = x, y = y } " "
        }
    else if cell == "~" then
        { model
            | x = x
            , y = y
            , gameOver = True
        }
    else
        model


initBoard : Array (Array String)
initBoard =
    """
Eat the stars (*).
Avoid the snakes (~).
Press q to quit.
+----------------+
|                |
|   *      ~     |
|   ~            |
|           ~    |
|      ~         |
|           *    |
|    ~   ~       |
|                |
| ~  *     ~     |
|                |
+----------------+
    """
        |> String.split "\n"
        |> Array.map (String.split "")


view : Model -> String
view model =
    let
        header =
            if model.gameOver then
                Ansi.wrapColor Ansi.Red "**GAME OVER**\n"
            else
                "\n"
    in
    header ++ (render model)


render : Model -> String
render model =
    let
        characterColor =
            if model.gameOver then
                Ansi.Red
            else
                Ansi.Blue

        character =
            Ansi.wrapColor characterColor "@"

        boardWithColor =
            model.board
                |> Array2d.set {x = model.x, y = model.y } character
                |> Array2d.map colorizeCell
                
    in
    boardWithColor
        |> Array.map (String.join "")
        |> String.join "\n"
        |> String.append "\nScore: "
        |> String.append (String.fromInt model.score)
        |> String.append "\n"
        |> String.append Ansi.hideCursor


colorizeCell : String -> String
colorizeCell cell =
    let
        color =
            case cell of
                "~" -> Ansi.Green
                "*" -> Ansi.Yellow
                "-" -> Ansi.Cyan
                "+" -> Ansi.Cyan
                "|" -> Ansi.Cyan
                _ -> Ansi.NoColor
    in
    Ansi.wrapColor color cell


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none
