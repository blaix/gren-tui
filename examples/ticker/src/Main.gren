module Main exposing (main)


import Ansi
import Init
import Math
import Node
import Time
import Stream exposing (Stream)
import Task
import Tui


main : Tui.Program Model Msg
main =
    Tui.defineProgram
        { init = init
        , update = update
        , view = view
        , subscriptions = subscriptions
        , onInput = GotInput
        }


type alias Model =
    { ticks : Int
    , stdout : Stream
    }


init : Node.Environment -> Init.Task { model : Model, command : Cmd Msg }
init env =
    Node.startProgram
        { model = 
            { ticks = 1
            , stdout = env.stdout
            }
        , command =
            Stream.sendString env.stdout Ansi.hideCursor 
        }


type Msg
    = Tick Time.Posix
    | GotInput Tui.Input
    | ReadyToExit


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        Tick _ ->
            { model = { model | ticks = model.ticks + 1 }
            , command = Cmd.none
            }

        GotInput input ->
            { model = model
            , command = 
                case input of
                    Tui.KeyChar "q" ->
                        Cmd.batch
                            [ Stream.sendString model.stdout Ansi.showCursor
                            , Task.perform (\_ -> ReadyToExit) (Task.succeed {})
                            ]
                    _ ->
                        Cmd.none
            }

        ReadyToExit ->
            { model = model
            , command = Node.exit
            }


view : Model -> String
view model =
    let
        numHearts =
            Math.modBy 9 model.ticks

        hearts =
            Array.repeat numHearts "ðŸ©·"

        heartsString =
            case hearts of
                [] -> "" -- Test changing number of output lines
                _ -> ["\n"] ++ hearts |> String.join ""

    in
    String.join ""
        [ "How high can I count? Let's see: "
        , String.fromInt model.ticks
        , Ansi.wrapColor Ansi.Yellow "\nPress q to quit."
        , heartsString
        ]


subscriptions : Model -> Sub Msg
subscriptions model =
    Time.every 1000 Tick
