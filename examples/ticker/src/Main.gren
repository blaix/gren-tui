module Main exposing (main)


import EscapeSequence as Esc
import Init
import Math
import Node
import Stream exposing (Stream)
import Time
import Tui


main : Tui.Program Model Msg
main =
    Tui.defineProgram
        { init = init
        , update = update
        , view = view
        , subscriptions = subscriptions
        , onInput = GotInput
        }


type alias Model =
    { ticks : Int
    }


init : Node.Environment -> Init.Task { model : Model, command : Cmd Msg }
init env =
    Node.startProgram
        { model = { ticks = 0 }
        , command = Cmd.none
        }


type Msg
    = Tick Time.Posix
    | GotInput Tui.Input


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        Tick _ ->
            { model = { model | ticks = model.ticks + 1 }
            , command = Cmd.none
            }

        GotInput input ->
            { model = model
            , command = 
                case input of
                    Tui.KeyChar "q" ->
                        Node.exit
                    _ ->
                        Cmd.none
            }


view : Model -> String
view model =
    let
        blink = 
            -- Test changes in number of output lines
            ( if Math.modBy 2 model.ticks == 0 then
                "\nðŸ©·ðŸ©·ðŸ©·"
              else
                  ""
            )
    in
    String.join ""
        [ "Seconds since you've started this program: "
        , String.fromInt model.ticks
        , Esc.wrapColor Esc.Yellow "\nPress q to quit."
        , blink
        ]


subscriptions : Model -> Sub Msg
subscriptions model =
    Time.every 1000 Tick
