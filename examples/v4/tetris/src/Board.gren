module Board exposing
    ( Board
    , init
    , placePiece
    , toString
    , visibleCells
    )

import Ansi exposing (Color)
import Array2d exposing (Array2d)
import Piece exposing (Piece)
import Util.Array
import Util.Array2d


type Cell
    = Empty
    | Block Ansi.Color


type alias Board =
    Array2d Cell


init : Int -> Int -> Board
init width height =
    Array.repeat height <|
        Array.repeat width Empty


visibleCells : Board -> Array { x : Int, y : Int, color : Ansi.Color }
visibleCells board =
    let
        reducer { x, y } cell =
            when cell is
                Empty ->
                    Nothing

                Block color ->
                    Just
                        { x = x
                        , y = y
                        , color = color
                        }
    in
    board
        |> Util.Array2d.indexedFilterMap reducer
        |> Array.flatten


placePiece : Piece -> Board -> Board
placePiece piece =
    Array2d.indexedMap
        (\{ x, y } boardCell ->
            let
                pieceInCell =
                    Array.findFirst
                        (\p -> p.x == x && p.y == y)
                        (Piece.visibleCells piece)
            in
            when pieceInCell is
                Just p -> Block p.value.color
                Nothing -> boardCell
        )


toString : Board -> String
toString board =
    board
        |> Array2d.map cellToString
        |> Array.map (String.join "")
        |> String.join ("\n")


cellToString : Cell -> String
cellToString cell =
    let
        color =
            when cell is
                Empty ->
                    Ansi.NoColor

                Block c ->
                    c
    in
    Ansi.wrapBgColor color "  " -- two spaces
