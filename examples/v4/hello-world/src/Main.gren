module Main exposing (main)


import Ansi
import Bytes exposing (Bytes)
import Init
import Node
import Stream
import Task
import Tui
import UI


main : Tui.Program Model Msg
main =
    Tui.defineProgram
        { init = init
        , update = update
        , view = view
        , subscriptions = subscriptions
        , onInput = GotInput
        }


type alias Model =
    { stdout : Stream.Writable Bytes
    }


init : Tui.Environment -> Init.Task { model : Model, command : Cmd Msg }
init env =
    Node.startProgram
        { model = { stdout = env.stdout }
        , command = 
            Tui.hideCursor env.stdout
                |> Task.execute
        }


type Msg
    = GotInput Tui.Input


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    when msg is
        GotInput input ->
            { model = model
            , command = 
                when input is
                    Tui.Escape ->
                        Tui.exit model.stdout
                            |> Task.execute
                    _ ->
                        Cmd.none
            }


view : Model -> UI.Element
view model =
    UI.text [] "Hello, World!"


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none
