module Piece exposing
    ( Piece
    , visibleCells
    , rotate
    , t
    )

import Ansi exposing (Color)
import Array2d exposing (Array2d)
import Util.Array
import Util.Array2d


{-| Tetromino pieces.

https://tetris.fandom.com/wiki/Tetromino
-}


type alias Piece =
    { x : Int
    , y : Int
    , initialShape : Shape
    , currentShape : Shape
    , shapes : Array Shape
    , color : Ansi.Color
    }


type alias Shape =
    Array2d Cell


type Cell
    = Empty
    | Block


type alias Point =
    { x : Int
    , y : Int
    }


rotate : Piece -> Piece
rotate piece =
    -- https://tetris.wiki/Super_Rotation_System
    -- TODO: make sure rotation is a valid move
    let
        currentIndex =
            piece.shapes
                |> Util.Array.indexOf piece.currentShape
                |> Maybe.withDefault 0

        nextShape =
            piece.shapes
                |> Array.get (currentIndex + 1)
                |> Maybe.withDefault piece.initialShape
    in
    { piece | currentShape = nextShape } 


visibleCells : Piece -> Array { x : Int, y : Int, color : Ansi.Color }
visibleCells piece =
    let
        mapper { x, y } cell =
            case cell of
                Empty ->
                    Nothing

                Block ->
                    Just
                        { x = x + piece.x
                        , y = y + piece.y
                        , color = piece.color
                        }
    in
    piece.currentShape
        |> Util.Array2d.indexedFilterMap mapper
        |> Array.flatten


t : Point -> Piece
t { x, y } =
    let
        initialShape =
            [ " # "
            , "###"
            , "   "
            ]
        
        shapes =
            [ initialShape ] ++
            [ [ " # "
              , " ##"
              , " # "
              ]
            , [ "   "
              , "###"
              , " # "
              ]
            , [ " # "
              , "## "
              , " # "
              ]
            ]
    in
    { x = x
    , y = y
    , color = Ansi.Blue
    , initialShape = initialShape |> charsToShape
    , currentShape = initialShape |> charsToShape
    , shapes = shapes |> Array.map charsToShape
    }


charsToShape : Array String -> Shape
charsToShape lines =
    lines
        |> Array.map String.toArray
        |> Array2d.map
            (\c ->
                case c of
                    '#' -> Block
                    _ -> Empty
            )
