module UI.TextField exposing
    ( TextField
    , init
    , update
    , view
    , toString
    )


{-| UI Component for entering text.

The component handles the normal text input functionality, like backspace, delete, and moving the cursor with arrow keys.

The important functions you'll need are:

- [`init`](#init): Initialize the field.
- [`update`](#update): Update the field when you receive input that you want to attribute to it.
- [`toString`](#toString): Get the string value of the field.
- [`view`](#view): Render the field as part of your application's `view`.

Look for the latest "form" example in the [repo's example folder](https://github.com/blaix/gren-tui/tree/main/examples)
for a full working example.

@docs TextField, init, update, view, toString
-}

import Ansi
import Tui
import UI


{-|-}
type TextField =
    TextField
        { value : String
        , cursor : Int
        }


{-| Initialize a TextField component.

The passed string will be the starting value.
-}
init : String -> TextField
init value =
    TextField
        { value = value
        , cursor = String.count value
        }


{-| Update a TextField component with the given [Input](Tui#Input).

You would normally call this in your `update` function when you receive an input event that you want to attribute to the text field.
-}
update : Tui.Input -> TextField -> TextField
update input field =
    let
        f =
            split field

        (TextField { cursor }) =
            field
    in
    when input is
        Tui.KeyChar key ->
            TextField
                { value = f.first ++ key ++ f.last
                , cursor = cursor + 1
                }

        Tui.Space ->
            TextField
                { value = f.first ++ " " ++ f.last
                , cursor = cursor + 1
                }

        Tui.Backspace ->
            TextField
                { value = String.dropLast 1 f.first ++ f.last
                , cursor =
                    if cursor > 0 then
                        cursor - 1
                    else
                        0
                }

        Tui.Delete ->
            TextField
                { value = f.first ++ String.dropFirst 1 f.last
                , cursor = cursor
                }

        Tui.ArrowLeft ->
            TextField
                { value = f.first ++ f.last
                , cursor =
                    if cursor > 0 then
                        cursor - 1
                    else
                        0
                }

        Tui.ArrowRight ->
            let
                value =
                    f.first ++ f.last

                length =
                    String.count value
            in
            TextField
                { value = f.first ++ f.last
                , cursor =
                    if cursor < length then
                        cursor + 1
                    else
                        cursor
                }

        _ ->
            field


split : TextField -> { first : String, last : String }
split (TextField { value, cursor }) =
    let
        length =
            String.count value
    in
    { first =
        String.takeFirst cursor value
    , last =
        String.takeLast (length - cursor) value
    }


{-| Render a TextField in your `view`.
-}
view : TextField -> UI.Element
view (TextField { value, cursor })=
    let
        field =
            split <|
                TextField
                    { value = value ++ " "
                    , cursor = cursor
                    }

        first =
            field.first

        middle =
            String.takeFirst 1 field.last

        last =
            String.dropFirst 1 field.last

        cursorChar =
            -- invert colors
            -- https://gist.github.com/ConnerWill/d4b6c776b509add763e17f9f113fd25b#colors--graphics-mode
            String.join ""
                [ Ansi.escape
                , "[7m"
                , middle
                , Ansi.escape
                , "[27m"
                ]
    in
    UI.text [] <|
        first ++ cursorChar ++ last


{-| Get the current value of a TextField as a String.
-}
toString : TextField -> String
toString (TextField { value }) =
    value
