module UI exposing
    ( Element
    , toString

    -- Layout
    , row
    , column
    , text
    , bordered
    , charGrid
    )


import Ansi
import Array2d exposing (Array2d)
import SingleLine exposing (SingleLine)
import UI.Attribute as Attribute exposing (Attribute)
import UI.Border exposing (Border)


type Element
    = Row { attrs : Array Attribute, children : Array Element }
    | Col { attrs : Array Attribute, children : Array Element }
    | Text { attrs : Array Attribute, content : SingleLine }


type alias Grid =
    Array2d Cell


type alias Cell =
    { attrs : Array Attribute
    , content : SingleLine 
    }


type alias GridChar =
    { attrs : Array Attribute
    , char : Char
    }


emptyCell : Cell
emptyCell =
    { attrs = []
    , content = SingleLine.empty
    }


row : Array Attribute -> Array Element -> Element
row attrs children =
    Row { attrs = attrs, children = children }


column : Array Attribute -> Array Element -> Element
column attrs children =
    Col { attrs = attrs, children = children }


text : Array Attribute -> String -> Element
text attrs content =
    content
        |> SingleLine.fromString
        |> Array.map (\l -> Text { attrs = attrs, content = l })
        |> column []


charGrid : Array Attribute -> Array2d GridChar -> Element
charGrid attrs grid =
    grid
        |> Array2d.map
            (\c -> 
                c.char
                    |> String.fromChar
                    |> Attribute.applyAll (attrs ++ c.attrs)
            )
        |> Array.map (String.join "")
        |> String.join "\n"
        |> text attrs


bordered : Array Attribute -> Border -> Element -> Element
bordered attrs border element = 
    let
        -- Can we avoid the extra conversion here?
        -- Only using it here to get the width/height...
        grid =
            elementToGrid element

        width =
            gridWidth grid
            -- |> Debug.log "gridWidth"

        height =
            Array.length grid
            -- |> Debug.log "height"
    in
    row attrs
        -- Left side
        [ column []
            [ text [] border.topLeft
            , column [] (Array.repeat height (text [] border.left))
            , text [] border.bottomLeft
            ]
            -- |> Debug.log "left"

        -- Center
        , column []
            [ text [] (String.repeat width border.top)
            , element
            , text [] (String.repeat width border.bottom)
            ]

        -- Right side
        , column []
            [ text [] border.topRight
            , column [] (Array.repeat height (text [] border.right))
            , text [] border.bottomRight
            ]
        ]


mergeAttributes : Array Attribute -> Element -> Element
mergeAttributes parentAttrs element =
    case element of
        Row { attrs, children } ->
            Row 
                { attrs = parentAttrs ++ attrs
                , children =
                    children
                        |> Array.map (mergeAttributes (parentAttrs ++ attrs))
                }

        Col { attrs, children } ->
            Col 
                { attrs = parentAttrs ++ attrs
                , children =
                    children
                        |> Array.map (mergeAttributes (parentAttrs ++ attrs))
                }

        Text { attrs, content } ->
            Text
                { attrs = parentAttrs ++ attrs
                , content = content
                }


-- TODO: pass maxWidth to this
toString : Element -> String
toString element =
    element
        |> mergeAttributes []
        |> elementToGrid
        |> gridToString


elementToGrid : Element -> Grid
elementToGrid element =
    case element of
        Row { attrs, children } ->
            children
                |> Array.map elementToGrid
                |> joinHorizontal attrs
        
        Col { children } ->
            children
                |> Array.map elementToGrid
                |> joinVertical


        Text { attrs, content } ->
            [[{ attrs = attrs, content = content }]]


joinHorizontal : Array Attribute -> Array Grid -> Grid
joinHorizontal parentAttrs grids =
    let
        normalizedGrids =
            grids
                |> normalizeHeight parentAttrs
                |> Array.map normalizeWidth

        numRows =
            normalizedGrids
                |> Array.get 0
                |> Maybe.withDefault [[]]
                |> Array.length
    in
    Array.initialize numRows 0
        {-
            Merge an array of grids into a single grid, where each row of the
            new grid is constructed from the corresponding row of the original
            grids. So if we start with this:

                [ [ [ 1, 2 ]
                  , [ 3, 4 ]
                  ]
                , [ [ a, b ]
                  , [ c, d ]
                  ]
                ]

            we should end up with this:

                [ [ 1, 2, a, b ]
                , [ 3, 4, c, d ]
                ]
        -}
        (\rowNum ->
            normalizedGrids
                |> Array.map 
                    (\g -> Array.get rowNum g
                        |> Maybe.withDefault [] -- how to enforce this should never happen? (since we already normalized height/width)
                    )
                |> Array.flatten
        )


normalizeHeight : Array Attribute -> Array Grid -> Array Grid
normalizeHeight parentAttrs allGrids =
    let
        maxRows =
            allGrids
                |> Array.map Array.length
                |> Array.maximum
                |> Maybe.withDefault 0
    in
    allGrids
        |> Array.map
            (\g ->
                let
                    diff =
                        maxRows - Array.length g

                    extraRows =
                        Array.repeat diff
                            [ { attrs = parentAttrs
                              , content = SingleLine.empty
                              }
                            ]
                in
                g ++ extraRows
            )


normalizeWidth : Grid -> Grid
normalizeWidth grid =
    let
        targetWidth =
            gridWidth grid
    in
    grid
        |> Array.map 
            (\thisRow ->
                let
                    thisRowWidth =
                        thisRow
                            |> Array.map .content
                            |> Array.map SingleLine.width
                            |> Array.foldl (+) 0

                    diff =
                        targetWidth - thisRowWidth

                    popped =
                        Array.popLast thisRow
                            |> Maybe.withDefault
                                { last = emptyCell
                                , initial = []
                                }

                    lastCellContent =
                        popped.last.content

                    lastCellTargetWidth =
                        (SingleLine.width lastCellContent) + diff

                    newLastCellContent =
                        SingleLine.padRight 
                            lastCellTargetWidth 
                            lastCellContent
    
                    paddedCell =
                        { popped.last 
                            | content = newLastCellContent
                        }
                in
                Array.pushLast paddedCell popped.initial
            )


joinVertical : Array Grid -> Grid
joinVertical =
    Array.flatten


{- Turn a grid like this:

    [ ["a", "b"]
    , ["1", "2"]
    ]

Into a grid like this:

    [ ["a", "1"]
    , ["b", "2"]
    ]

For when you have an array of rows and want an array of columns, or vice versa.
-}
invert : Grid -> Grid
invert grid =
    let
        maxCols =
            grid
                |> Array.map Array.length
                |> Array.maximum
                |> Maybe.withDefault 0

        numRows =
            Array.length grid
    in
    Array.initialize maxCols 0
        (\x ->
            Array.initialize numRows 0
                (\y ->
                    Array2d.get { x = x, y = y } grid
                        |> Maybe.withDefault
                            { attrs = [], content = SingleLine.empty }
                )
        )


gridToString : Grid -> String
gridToString grid =
    grid
        |> Array.map (Array.map cellToString)
        |> Array.map (String.join "")
        |> String.join "\n"


cellToString : Cell -> String
cellToString cell =
    cell.content
        |> SingleLine.toString
        |> Attribute.applyAll cell.attrs


gridWidth : Grid -> Int
gridWidth grid =
    grid
        |> Array2d.map .content
        |> Array2d.map SingleLine.toString
        |> Array2d.map Ansi.width
        |> Array.map (Array.foldl (+) 0)
        |> Array.maximum
        |> Maybe.withDefault 0

