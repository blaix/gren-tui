module UI exposing
    ( Element
    , toString

    -- Layout
    , row
    , column
    , text
    , bordered
    , charGrid
    )


{-| Layout elements for your TUI view

Your view takes a model and returns an [`Element`](#Element).
The simplest element is [`text`](#text):

    view model =
        UI.text [] "Hello!"

But you can construct more complex layouts by composing an element out of other elements.

Your primary building blocks are [`row`](#row) and [`column`](#column).
These can be nested to construct simple or complex layouts.
For example:

    UI.row []
        [ UI.text [] "Left "
        , UI.column []
            [ UI.text [] "Right 1"
            , UI.text [] "Right 2"
            ]
        ]

Which would render like this:

    Left Right 1
         Right 2

There's also a special [`bordered`](#bordered) element to wrap other elements in a [border](UI.Border).

Your innermost element will be [`text`](#text).

All elements can be styled by passing array of [attributes](UI.Attribute) as the first argument.

@docs Element, row, column, bordered, text, toString

## Other Layout Elements

@docs charGrid

-}

import Ansi
import Array2d exposing (Array2d)
import SingleLine exposing (SingleLine)
import UI.Attribute as Attribute exposing (Attribute)
import UI.Border exposing (Border)


{-| Basic building block of of the view.
-}
type Element
    = Row { attrs : Array Attribute, children : Array Element }
    | Col { attrs : Array Attribute, children : Array Element }
    | Text { attrs : Array Attribute, content : SingleLine }


type alias Grid =
    Array2d Cell


type alias Cell =
    { attrs : Array Attribute
    , content : SingleLine 
    }


type alias GridChar =
    { attrs : Array Attribute
    , char : Char
    }


emptyCell : Cell
emptyCell =
    { attrs = []
    , content = SingleLine.empty
    }


{-| Lay out elements horizontally.

For example:

    row [] 
        [ text [] "one "
        , text [] "two "
        , text [] "three " 
        ]

Would output:

    one two three

This is helpful when you want a columnar layout.
For example:

    row []
        [ text [] " one\n two\n three"
        , text [] " four\n five\n six"
        ]

Would output:

    one   four
    two   five
    three six

Instead of newlines, you could use the [`column`](#column) function:

    row []
        [ column [] 
            [ text [] "one"
            , text [] "two"
            , text [] "three"
            ]
        , column [] 
            [ text [] "four"
            , text [] "five"
            , text [] "six"
            ]
        ]

Which would also output:

    one   four
    two   five
    three six

This becomes very powerful as you continue to nest rows and columns!

The first argument is an array of [`UI.Attribute`](UI.Attribute) values.
Use this to apply styles to all elements in the row, even nested elements.

-}
row : Array Attribute -> Array Element -> Element
row attrs children =
    Row { attrs = attrs, children = children }


{-| Lay out elements vertically.

For example:

    column [] 
        [ text [] "one "
        , text [] "two "
        , text [] "three " 
        ]

Would output:

    one
    two
    three

This becomes very powerful when nested in a [`row`](#row) function:

    row []
        [ column [] 
            [ text [] "one"
            , text [] "two"
            , text [] "three"
            ]
        , column [] 
            [ text [] "four"
            , text [] "five"
            , text [] "six"
            ]
        ]

Which would output output:

    one   four
    two   five
    three six

The first argument is an array of [`UI.Attribute`](UI.Attribute) values.
Use this to apply styles to all elements in the column, even nested elements.

-}
column : Array Attribute -> Array Element -> Element
column attrs children =
    Col { attrs = attrs, children = children }


{-| A text element.

The first argument is an array of [`UI.Attribute`](UI.Attribute) values used to style the text.

Note that text will _not_ wrap automatically, though explicit newlines will be preserved.

-}
text : Array Attribute -> String -> Element
text attrs content =
    content
        |> SingleLine.fromString
        |> Array.map (\l -> Text { attrs = attrs, content = l })
        |> column []


{-| TODO: remove this
-}
charGrid : Array Attribute -> Array2d GridChar -> Element
charGrid attrs grid =
    grid
        |> Array2d.map
            (\c -> 
                c.char
                    |> String.fromChar
                    |> Attribute.applyAll (attrs ++ c.attrs)
            )
        |> Array.map (String.join "")
        |> String.join "\n"
        |> text attrs


{-| Wrap an element in a border.

The different types of borders are in [`UI.Border`](UI.Border).

The element you pass to this function can be as large or deeply nested as you want,
and the border will be around the whole thing.

Borders can also be nested and styled like any other element.

-}
bordered : Array Attribute -> Border -> Element -> Element
bordered attrs border element = 
    let
        -- Can we avoid the extra conversion here?
        -- Only using it here to get the width/height...
        grid =
            elementToGrid element

        width =
            gridWidth grid
            -- |> Debug.log "gridWidth"

        height =
            Array.length grid
            -- |> Debug.log "height"
    in
    row attrs
        -- Left side
        [ column []
            [ text [] border.topLeft
            , column [] (Array.repeat height (text [] border.left))
            , text [] border.bottomLeft
            ]
            -- |> Debug.log "left"

        -- Center
        , column []
            [ text [] (String.repeat width border.top)
            , element
            , text [] (String.repeat width border.bottom)
            ]

        -- Right side
        , column []
            [ text [] border.topRight
            , column [] (Array.repeat height (text [] border.right))
            , text [] border.bottomRight
            ]
        ]


mergeAttributes : Array Attribute -> Element -> Element
mergeAttributes parentAttrs element =
    case element of
        Row { attrs, children } ->
            Row 
                { attrs = parentAttrs ++ attrs
                , children =
                    children
                        |> Array.map (mergeAttributes (parentAttrs ++ attrs))
                }

        Col { attrs, children } ->
            Col 
                { attrs = parentAttrs ++ attrs
                , children =
                    children
                        |> Array.map (mergeAttributes (parentAttrs ++ attrs))
                }

        Text { attrs, content } ->
            Text
                { attrs = parentAttrs ++ attrs
                , content = content
                }


{-| Return the element as a string that can be printed to the terminal.

_**You shouldn't need this in normal apps.**_

gren-tui uses this internally to convert your view to something that can printed to the terminal.

But it may be useful if you're writing a package or doing something weird.
Have fun!

The first parameter is the maximum width in visible characters.
You will usually want to use [`Terminal.Configuration.columns`](https://packages.gren-lang.org/package/gren-lang/node/version/4/module/Terminal#Configuration) for this.

For example:

    toString 80 <|
        column []
            [ text [] "12"
            , text [] "1234"
            ]

will return:

    "12  \n1234"

Any content longer than the maximum visible width will be removed.

For example:
    
    toString 3 <|
        column []
            [ text [] "12"
            , text [] "1234"
            ]

will return:
    
    "12 \n123"

-}
toString : Int -> Element -> String
toString maxWidth element =
    element
        |> mergeAttributes []
        |> elementToGrid 
        |> trimGrid maxWidth
        |> gridToString


elementToGrid : Element -> Grid
elementToGrid element =
    case element of
        Row { attrs, children } ->
            children
                |> Array.map elementToGrid
                |> joinHorizontal attrs
        
        Col { children } ->
            children
                |> Array.map elementToGrid
                |> joinVertical


        Text { attrs, content } ->
            [[{ attrs = attrs, content = content }]]


trimGrid : Int -> Grid -> Grid
trimGrid maxWidth grid =
    let
        width =
            gridWidth grid
    in
    if width <= 0 then
        grid
    else if width <= maxWidth then
        grid
    else
        grid
            |> Array.map (trimGridRow maxWidth)
            |> trimGrid maxWidth


trimGridRow : Int -> Array Cell -> Array Cell
trimGridRow maxWidth thisRow =
    let
        width =
            gridWidth [thisRow]

        diff =
            width - maxWidth

        popped =
            Array.popLast thisRow
    in
    case popped of
        Nothing ->
            thisRow

        Just { initial, last } ->
            if diff >= SingleLine.width last.content then
                trimGridRow maxWidth initial
            else
                initial
                    |> Array.pushLast
                        { last
                            | content =
                                SingleLine.dropRight diff last.content
                        }


joinHorizontal : Array Attribute -> Array Grid -> Grid
joinHorizontal parentAttrs grids =
    let
        normalizedGrids =
            grids
                |> normalizeHeight parentAttrs
                |> Array.map normalizeWidth

        numRows =
            normalizedGrids
                |> Array.get 0
                |> Maybe.withDefault [[]]
                |> Array.length
    in
    Array.initialize numRows 0
        {-
            Merge an array of grids into a single grid, where each row of the
            new grid is constructed from the corresponding row of the original
            grids. So if we start with this:

                [ [ [ 1, 2 ]
                  , [ 3, 4 ]
                  ]
                , [ [ a, b ]
                  , [ c, d ]
                  ]
                ]

            we should end up with this:

                [ [ 1, 2, a, b ]
                , [ 3, 4, c, d ]
                ]
        -}
        (\rowNum ->
            normalizedGrids
                |> Array.map 
                    (\g -> Array.get rowNum g
                        |> Maybe.withDefault [] -- how to enforce this should never happen? (since we already normalized height/width)
                    )
                |> Array.flatten
        )


normalizeHeight : Array Attribute -> Array Grid -> Array Grid
normalizeHeight parentAttrs allGrids =
    let
        maxRows =
            allGrids
                |> Array.map Array.length
                |> Array.maximum
                |> Maybe.withDefault 0
    in
    allGrids
        |> Array.map
            (\g ->
                let
                    diff =
                        maxRows - Array.length g

                    extraRows =
                        Array.repeat diff
                            [ { attrs = parentAttrs
                              , content = SingleLine.empty
                              }
                            ]
                in
                g ++ extraRows
            )


normalizeWidth : Grid -> Grid
normalizeWidth grid =
    let
        targetWidth =
            gridWidth grid
    in
    grid
        |> Array.map 
            (\thisRow ->
                let
                    thisRowWidth =
                        thisRow
                            |> Array.map .content
                            |> Array.map SingleLine.width
                            |> Array.foldl (+) 0

                    diff =
                        targetWidth - thisRowWidth

                    popped =
                        Array.popLast thisRow
                            |> Maybe.withDefault
                                { last = emptyCell
                                , initial = []
                                }

                    lastCellContent =
                        popped.last.content

                    lastCellTargetWidth =
                        (SingleLine.width lastCellContent) + diff

                    newLastCellContent =
                        SingleLine.padRight 
                            lastCellTargetWidth 
                            lastCellContent
    
                    paddedCell =
                        { popped.last 
                            | content = newLastCellContent
                        }
                in
                Array.pushLast paddedCell popped.initial
            )


joinVertical : Array Grid -> Grid
joinVertical =
    Array.flatten


{- Turn a grid like this:

    [ ["a", "b"]
    , ["1", "2"]
    ]

Into a grid like this:

    [ ["a", "1"]
    , ["b", "2"]
    ]

For when you have an array of rows and want an array of columns, or vice versa.
-}
invert : Grid -> Grid
invert grid =
    let
        maxCols =
            grid
                |> Array.map Array.length
                |> Array.maximum
                |> Maybe.withDefault 0

        numRows =
            Array.length grid
    in
    Array.initialize maxCols 0
        (\x ->
            Array.initialize numRows 0
                (\y ->
                    Array2d.get { x = x, y = y } grid
                        |> Maybe.withDefault
                            { attrs = [], content = SingleLine.empty }
                )
        )


gridToString : Grid -> String
gridToString grid =
    grid
        |> Array.map (Array.map cellToString)
        |> Array.map (String.join "")
        |> String.join "\n"


cellToString : Cell -> String
cellToString cell =
    cell.content
        |> SingleLine.toString
        |> Attribute.applyAll cell.attrs


gridWidth : Grid -> Int
gridWidth grid =
    grid
        |> Array2d.map .content
        |> Array2d.map SingleLine.toString
        |> Array2d.map Ansi.width
        |> Array.map (Array.foldl (+) 0)
        |> Array.maximum
        |> Maybe.withDefault 0

