module Ansi exposing

    -- Screen
    ( Direction(..)
    , clearScreen
    , clearLine

    -- Color
    , Color(..)
    , wrapColor
    , setColor

    -- Cursor
    , moveUpLines
    , moveDownLines
    , showCursor
    , hideCursor

    -- Keys
    , arrowUp
    , arrowDown
    , arrowLeft
    , arrowRight

    -- Font styling
    , FontWeight(..)
    , wrapFontWeight
    , setFontWeight
    , wrapItalic
    , wrapUnderline
    , wrapStrikeThrough
    , setItalic
    , unsetItalic
    , setUnderline
    , unsetUnderline
    , setStrikeThrough
    , unsetStrikeThrough
    )


{-| ANSI escape sequences.

Functions and strings to control the screen, cursor, and text formatting in
the terminal.

## Color

@docs wrapColor, setColor, Color

## Font Styling

@docs wrapFontWeight, setFontWeight, wrapItalic, wrapUnderline, wrapStrikeThrough, setItalic, unsetItalic, setUnderline, unsetUnderline, setStrikeThrough, unsetStrikeThrough, FontWeight

## Screen

@docs clearScreen, clearLine, Direction

## Cursor

@docs moveUpLines, moveDownLines, showCursor, hideCursor

## Arrow Keys

@docs arrowUp, arrowDown, arrowLeft, arrowRight

-}


prefix : String
prefix =
    "\u{001b}["


-- SCREEN


{-| Direction for clear functions.

* Down: Clear things after the cursor.
* Up: Clear things before the cursor.
* Full: Clear both directions.
-}
type Direction
    = Up
    | Down
    | Full


{-| Clear screen in the given [Direction](#Direction).
-}
clearScreen : Direction -> String
clearScreen direction =
    prefix ++ (directionString direction) ++ "J"


{-| Clear the current line in the given [direction](#Direction).
-}
clearLine : Direction -> String
clearLine direction =
    prefix ++ (directionString direction) ++ "K"


directionString : Direction -> String
directionString direction =
    case direction of
        Down ->
            "0"

        Up ->
            "1"

        Full ->
            "2"


-- COLOR


{-| -}
type Color
    = NoColor
    | Black
    | Red
    | Green
    | Yellow
    | Blue
    | Magenta
    | Cyan
    | White


{-| Display the given text in the given [color](#Color).
-}
wrapColor: Color -> String -> String
wrapColor color string =
    String.join ""
        [ setColor color
        , string
        , setColor NoColor
        ]


{-| Change all subsequent terminal output to the given color (even after program exit).
-}
setColor : Color -> String
setColor color =
    String.join ""
        [ prefix
        , colorCode color
        , "m"
        ]


colorCode : Color -> String
colorCode color_ =
    case color_ of
        NoColor -> "0"
        Black -> "30"
        Red -> "31"
        Green -> "32"
        Yellow -> "33"
        Blue -> "34"
        Magenta -> "35"
        Cyan -> "36"
        White -> "37"


-- FONT STYLING


{-| -}
type FontWeight
    = NormalWeight
    | Bold
    | Faint


{-| Display string with the given font weight.
-}
wrapFontWeight : FontWeight -> String -> String
wrapFontWeight weight string =
    String.join ""
        [ setFontWeight weight
        , string
        , setFontWeight NormalWeight
        ]


{-| Change all terminal output from this point to the given font weight (even after program exit).
-}
setFontWeight : FontWeight -> String
setFontWeight weight =
    String.join ""
        [ prefix
        , fontWeightCode weight
        , "m"
        ]


fontWeightCode : FontWeight -> String
fontWeightCode weight =
    case weight of
        NormalWeight -> "22"
        Bold -> "1"
        Faint -> "2"


{-| Display the given string as italic.
-}
wrapItalic : String -> String
wrapItalic string =
    String.join ""
        [ setItalic
        , string
        , unsetItalic
        ]


{-| Display the given string as underline.
-}
wrapUnderline : String -> String
wrapUnderline string =
    String.join ""
        [ setUnderline
        , string
        , unsetUnderline
        ]


{-| Display the given string with a strikethrough.
-}
wrapStrikeThrough : String -> String
wrapStrikeThrough string =
    String.join ""
        [ setStrikeThrough
        , string
        , unsetStrikeThrough
        ]


{-| Change all terminal output from this point to italic (even after program exit).
-}
setItalic : String
setItalic =
    prefix ++ "3m"


{-| Stop displaying terminal output as italic.
-}
unsetItalic : String
unsetItalic =
    prefix ++ "23m"


{-| Change all terminal output from this point to underline (even after program exit).
-}
setUnderline : String
setUnderline =
    prefix ++ "4m"


{-| Stop displaying terminal output as underline.
-}
unsetUnderline : String
unsetUnderline =
    prefix ++ "24m"


{-| Change all terminal output from this point with a strikethrough (even after program exit).
-}
setStrikeThrough : String
setStrikeThrough =
    prefix ++ "9m"


{-| Stop displaying terminal output with a strikethrough.
-}
unsetStrikeThrough : String
unsetStrikeThrough =
    prefix ++ "29m"


-- CURSOR


{-| Move the cursor up the given number of lines.
-}
moveUpLines : Int -> String
moveUpLines n =
    if n < 1 then
        ""
    else
        prefix ++ (String.fromInt n) ++ "F"


{-| Move the cursor down the given number of lines.
-}
moveDownLines : Int -> String
moveDownLines n =
    if n < 1 then
        ""
    else
        prefix ++ (String.fromInt n) ++ "E"


{-| Hide the cursor.

You should call [`showCursor`](#showCursor) before exiting your program, or the
cursor will still be gone after exiting (gren-tui will handle this
automatically if someone ctrl-c's out of your program).
-}
hideCursor : String
hideCursor =
    prefix ++ "?25l"


{-| Show the cursor.
-}
showCursor : String
showCursor =
    prefix ++ "?25h"


-- KEYS


{-| ANSI escape sequence for the up arrow key.
-}
arrowUp : String
arrowUp =
    prefix ++ "A"


{-| ANSI escape sequence for the down arrow key.
-}
arrowDown : String
arrowDown =
    prefix ++ "B"


{-| ANSI escape sequence for the right arrow key.
-}
arrowRight : String
arrowRight =
    prefix ++ "C"


{-| ANSI escape sequence for the left arrow key.
-}
arrowLeft : String
arrowLeft =
    prefix ++ "D"
