module Tui exposing
    ( defineProgram
    , Input(..)
    , Program
    )


{-| Model/View/Update for the command line.

Use this module to define a command-line program that uses [the elm architecture](https://guide.elm-lang.org/architecture/).
See [`defineProgram`](#defineProgram) for details, or one of the [examples](https://github.com/blaix/gren-tui/tree/main/examples).

If you want total control of your program and only need ANSI escape sequences, see [`Ansi`](Ansi).

## Defining your program

@docs defineProgram, Program

## User Input

@docs Input

-}


import Ansi
import Bytes exposing (Bytes)
import Bytes.Decode
import Bytes.Encode
import Init
import Node
import Stream exposing (Stream)
import Task
import Terminal


-- PROGRAM INIT


{-| Type alias for Tui programs.
-}
type alias Program model msg =
    Node.Program (Model model) (Msg msg)


{-| Record alias for all the functions you need to run a Tui program.
-}
type alias AppConfig model msg =
    { init : Node.Environment -> Init.Task { model : model, command : Cmd msg }
    , update : msg -> model -> { model : model, command : Cmd msg }
    , subscriptions : model -> Sub msg
    , view : model -> String
    , onInput : (Input -> msg)
    }


{-| Define your Tui program.

Very similar to a normal Node.defineProgram, except for two special functions:

`view`: Return a string for the current model. gren-tui will print this, and
keep track of how many lines are output so it can clear only those lines and
print again when the output changes. This lets you do things like render
progress bars, move characters around the screen, offer menu selections, etc.

`onInput`: Whenever your program receives input (a key is pressed, etc), a
message is sent to your app with a [`Input`](#Input) value representing the
input. This lets you capture text, trigger events on certain key presses, etc.
-}
defineProgram :
    { init : Node.Environment -> Init.Task { model : model, command : Cmd msg }
    , update : msg -> model -> { model : model, command : Cmd msg }
    , subscriptions : model -> Sub msg
    , view : model -> String
    , onInput : (Input -> msg)
    } -> Program model msg
defineProgram appConfig =
    Node.defineProgram
        { init = init appConfig
        , update = update appConfig
        , subscriptions = subscriptions appConfig.subscriptions
        }


type alias Model appModel =
    { stdin : Stream
    , stdout : Stream
    , stderr : Stream
    , appModel : appModel
    , terminalRows : Int
    , firstRow : Int
    }

init : 
    AppConfig model msg 
    -> Node.Environment
    -> Init.Task { model : Model model, command : Cmd (Msg msg) }
init appConfig env =
    Init.await (appConfig.init env) <| \app ->
        Init.await Terminal.initialize <| \termConfig ->
            let
                model =
                    { stdin = env.stdin
                    , stdout = env.stdout
                    , stderr = env.stderr
                    , appModel = app.model
                    , terminalRows = 0
                    , firstRow = 0
                    }
            in
            Node.startProgram <|
                case termConfig of
                    Just config ->
                        { model = { model | terminalRows = config.rows }
                        , command =
                            Cmd.batch
                                 [ Terminal.setStdInRawMode config.permission True
                                 , Stream.sendString env.stdout Ansi.getCursorReport
                                 , Cmd.map AppMsg app.command
                                 ]
                        }

                    Nothing ->
                        -- Not in an interactive terminal
                        { model = model
                        , command = Node.exitWithCode 1
                        }


-- UPDATE


type Msg appMsg
    = GotStdin Bytes
    | AppMsg appMsg
    | ReadyToExit


update : 
    AppConfig appModel appMsg 
    -> Msg appMsg
    -> Model appModel
    -> { model : Model appModel, command : Cmd (Msg appMsg) }
update appConfig msg model =
    case msg of
        GotStdin bytes ->
            let
                input =
                    bytesToInput bytes
            in
            case input of
                CtrlC ->
                    { model = model
                    , command = 
                        Cmd.batch
                            [ Stream.sendString model.stdout Ansi.showCursor
                            , Task.perform (\_ -> ReadyToExit) (Task.succeed {})
                            ]
                    }

                CursorReport row col ->
                    -- The first report is gren-tui getting initial cursor
                    -- position. Subsequent reports were requested by the app
                    -- and should trigger a normal app update.
                    if model.firstRow == 0 then
                        let
                            newModel =
                                { model | firstRow = row }
                        in
                        view newModel (appConfig.view model.appModel)

                    else
                        appUpdate
                            appConfig 
                            (appConfig.onInput input)
                            model

                _ ->
                    appUpdate
                        appConfig 
                        (appConfig.onInput input)
                        model

        ReadyToExit ->
            { model = model
            , command = Node.exit
            }

        AppMsg appMsg ->
            appUpdate appConfig appMsg model


appUpdate :
    AppConfig appModel appMsg 
    -> appMsg
    -> Model appModel
    -> { model : Model appModel, command : Cmd (Msg appMsg) }
appUpdate appConfig appMsg model =
    let
        appUpdateResult =
            appConfig.update appMsg model.appModel

        viewResult =
            view model (appConfig.view appUpdateResult.model)

        newModel =
            { viewResult.model | appModel = appUpdateResult.model }
    in
    { model = newModel
    , command =
        Cmd.batch
            [ viewResult.command
            , Cmd.map AppMsg appUpdateResult.command
            ]
    }


subscriptions : (model -> Sub msg) -> Model model -> Sub (Msg msg)
subscriptions appSubs model =
    Sub.batch
        [ Sub.map AppMsg (appSubs model.appModel)
        , Stream.listen model.stdin GotStdin
        ]


-- VIEW


view : Model model -> String -> { model : Model model, command : Cmd (Msg msg) }
view model appViewResult =
    let
        outputLines =
            countLines appViewResult

        scrolledRows =
            model.firstRow + outputLines - 1 - model.terminalRows

        firstRowAdjusted =
            if scrolledRows > 0 then
                model.firstRow - scrolledRows
            else
                model.firstRow

        newFirstRow =
            if firstRowAdjusted < 1 then
                1
            else
                firstRowAdjusted
    in
    { model = { model | firstRow = newFirstRow }
    , command = 
        Cmd.batch
            [ resetScreen model -- reset using the old model's firstRow!
            , Stream.sendString model.stdout appViewResult
            ]
    }


resetScreen : Model model -> Cmd (Msg msg)
resetScreen model =
        Cmd.batch
            [ Stream.sendString model.stdout <| Ansi.moveTo model.firstRow 1
            , Stream.sendString model.stdout <| Ansi.clearScreen Ansi.Down
            ]


-- INPUT


{-| Value sent to your `onInput` message when the program receives input
(a key is pressed, a signal is received, etc.)

Your program will receive keyboard input as the keys are pressed, as
opposed to getting a bunch of characters after Enter is pressed (under the hood
your terminal program is running in "raw mode"). For example, if someone types
"hi" after starting your program, it will receive a message with `KeyChar "h"`
and then another message with `KeyChar "i"`.

`CursorReport` is a special input type you will receive if you include
[`Ansi.getCursorReport`](Ansi.getCursorReport) in your output. Use this to get
the current row and column position of the cursor in the terminal (where the
upper-left corner of the window is row 1 column 1).

`CtrlC` is the "abort" signal and gets intercepted by gren-tui to exit your
program. For now you can't depend on receiving this in your app.
-}
type Input
    = KeyChar String
    | Tab
    | Space
    | Return
    | ArrowUp
    | ArrowDown
    | ArrowLeft
    | ArrowRight
    | CursorReport Int Int
    | CtrlC
    | UnknownInput


bytesToInput : Bytes -> Input
bytesToInput bytes =
    let
        ctrlC =
            Bytes.Encode.encode (Bytes.Encode.unsignedInt8 3)
    in
    if bytes == ctrlC then
        CtrlC
    else
        bytes
            |> Bytes.width
            |> Bytes.Decode.string
            |> (\decoder -> Bytes.Decode.decode decoder bytes)
            |> Maybe.map stringToInput
            |> Maybe.withDefault UnknownInput


stringToInput : String -> Input
stringToInput string =
    case checkCursorReport string of
        Just cursorReport ->
            cursorReport
        Nothing ->
            if string == Ansi.arrowUp then
                ArrowUp
            else if string == Ansi.arrowDown then
                ArrowDown
            else if string == Ansi.arrowRight then
                ArrowRight
            else if string == Ansi.arrowLeft then
                ArrowLeft
            else if string == "\t" then
                Tab
            else if string == "\r" then
                Return
            else if string == " " then
                Space
            else
                KeyChar string


checkCursorReport : String -> Maybe Input
checkCursorReport string =
    -- If we send Ansi.getCursorReport, we get back the cursor position (CPR)
    -- in the form ESC[n;mR, where n is the row and m is the column. 
    -- Using this to know where to move when clearing the screen on update.
    let
        parts =
            string
                |> String.split "["
                |> Array.map (String.split ";")
                |> Array.flatten
                |> Array.map (String.split "R")
                |> Array.flatten
    in
    case parts of
        ["\u{001b}", row, col, ""] ->
            let
                parsed =
                    { row = String.toInt row
                    , col = String.toInt col
                    }
            in
            case parsed of
                { row = Just r, col = Just c } ->
                    Just (CursorReport r c)
                _ ->
                    Nothing
        _ ->
            Nothing


-- UTIL


countLines : String -> Int
countLines string =
    string
        |> String.lines
        |> Array.length
