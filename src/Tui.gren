module Tui exposing
    ( defineProgram
    , Input(..)
    , Program
    , Environment
    , exit
    , exitWithCode
    , hideCursor
    )


{-| Model/View/Update for the command line.

Use this module to define a command-line program that uses [the elm architecture](https://gren-lang.org/book/applications/tea/).
See [`defineProgram`](#defineProgram),
the [repo README](https://github.com/blaix/gren-tui?tab=readme-ov-file#gren-tui),
or one of the [examples](https://github.com/blaix/gren-tui/tree/main/examples)
for more details.

## Defining your program

@docs defineProgram, Program, Environment

## User Input

@docs Input

## Helpers

@docs exit, exitWithCode, hideCursor

-}


import Ansi
import Ansi.Screen
import Bytes exposing (Bytes)
import Bytes.Decode
import Bytes.Encode
import FileSystem.Path exposing (Path)
import Init
import Node
import Stream
import Task exposing (Task)
import Terminal
import Time
import UI


-- PROGRAM INIT


framesPerSecond : Float
framesPerSecond =
    60.0


{-| Type alias for Tui programs.
-}
type alias Program model msg =
    Node.Program (Model model msg) (Msg msg)


{-| Record alias for all the functions you need to run a Tui program.
-}
type alias AppConfig model msg =
    { init : Environment -> Init.Task { model : model, command : Cmd msg }
    , update : msg -> model -> { model : model, command : Cmd msg }
    , subscriptions : model -> Sub msg
    , view : model -> UI.Element
    , onInput : (Input -> msg)
    }


{-| Holds information about the environment your program is running in.

This will be passed to your init function.
For example:

    init : Environment -> Init.Task { model : Model, command : Cmd Msg }
    init env =
        Node.startProgram
            { model = 
                { maxWidth = env.columns
                , maxHeight = env.rows
                }
            , command =
                Cmd.none
            }
-}
type alias Environment =
    -- Basically merged Node.Environment and Terminal.Configuration
    { platform : Node.Platform
    , cpuArchitecture : Node.CpuArchitecture
    , applicationPath : Path
    , args : Array String
    , stdout : Stream.Writable Bytes
    , stderr : Stream.Writable Bytes
    , stdin : Stream.Readable Bytes
    , colorDepth : Int
    , columns : Int
    , rows : Int
    }


{-| Define your Tui program.

Very similar to a normal [`Node.defineProgram`](https://packages.gren-lang.org/package/gren-lang/node/version/latest/module/Node#defineProgram),
except for two special functions:

`view`: Takes your Model and returns a [`UI`](UI) element.
gren-tui will print this to the screen, keeping track of how many lines are
output so it can clear only those lines and print again when the output
changes. This lets you do things like render progress bars, move characters
around the screen, offer menu selections, etc.

`onInput`: Whenever a key is pressed, a message is sent to your app with an
[`Input`](#Input) value. This lets you capture text, trigger events on certain
key presses, etc.
-}
defineProgram :
    { init : Environment -> Init.Task { model : model, command : Cmd msg }
    , update : msg -> model -> { model : model, command : Cmd msg }
    , subscriptions : model -> Sub msg
    , view : model -> UI.Element
    , onInput : (Input -> msg)
    } -> Program model msg
defineProgram appConfig =
    Node.defineProgram
        { init = init appConfig.init
        , update = update appConfig
        , subscriptions = subscriptions appConfig.subscriptions
        }


type alias Model appModel appMsg =
    { stdin : Stream.Readable Bytes
    , stdout : Stream.Writable Bytes
    , stderr : Stream.Writable Bytes
    , appModel : appModel
    , appInitCmd : Cmd appMsg
    , appReady : Bool
    , terminalRows : Int
    , terminalCols : Int
    , terminalPermission : Maybe Terminal.Permission
    , firstRow : Int
    , oldView : UI.Element
    }


init : 
    (Environment -> Init.Task { model : appModel, command : Cmd appMsg })
    -> Node.Environment
    -> Init.Task { model : Model appModel appMsg, command : Cmd (Msg appMsg) }
init appInit env =
    Init.await Terminal.initialize <| \termConfig ->
        let
            termConfigForApp =
                when termConfig is
                    Just tConfig ->
                        { rows = tConfig.rows
                        , columns = tConfig.columns
                        , colorDepth = tConfig.colorDepth
                        }
                    
                    -- We can fake the Nothing values since we won't even run
                    -- the app if term didn't initialize.
                    Nothing ->
                        { rows = 0
                        , columns = 0
                        , colorDepth = 0
                        }

            tuiEnv =
                { platform = env.platform
                , cpuArchitecture = env.cpuArchitecture
                , applicationPath = env.applicationPath
                , args = env.args
                , stdout = env.stdout
                , stderr = env.stderr
                , stdin = env.stdin
                , colorDepth = termConfigForApp.colorDepth
                , columns = termConfigForApp.columns
                , rows = termConfigForApp.rows
                }
            in
            Init.await (appInit tuiEnv) <| \app ->
                let
                    model =
                        { stdin = env.stdin
                        , stdout = env.stdout
                        , stderr = env.stderr
                        , appModel = app.model
                        , appInitCmd = app.command
                        , appReady = False
                        , terminalRows = 0
                        , terminalCols = 0
                        , terminalPermission = Nothing
                        , firstRow = 0
                        , oldView = UI.text [] ""
                        }
                in
                Node.startProgram <|
                    when termConfig is
                        Just config ->
                            { model = 
                                { model 
                                    | terminalRows = config.rows 
                                    , terminalCols = config.columns
                                    , terminalPermission = Just config.permission
                                }
                            , command =
                                Terminal.setStdInRawMode config.permission True
                                    |> Task.andThen (\_ -> Stream.writeStringAsBytes Ansi.getCursorReport env.stdout)
                                    |> Task.attempt WroteCursorReport
                            }

                        Nothing ->
                            { model = model
                            , command = 
                                crash 1 model.stderr
                                    "Failed to start program"
                                    "gren-tui can only run in an interactive terminal"
                            }


-- UPDATE


type Msg appMsg
    -- Setup
    = WroteCursorReport (Result Stream.Error (Stream.Writable Bytes))
    | GotCursorReport (Result Stream.Error Bytes)
    | AppReady {}

    -- Runtime messages
    | GotStdin (Result Stream.Error Bytes)
    | TerminalResized Terminal.Size
    | AppMsg appMsg
    | Tick Time.Posix


update : 
    AppConfig appModel appMsg 
    -> Msg appMsg
    -> Model appModel appMsg
    -> { model : Model appModel appMsg, command : Cmd (Msg appMsg) }
update appConfig msg model =
    when msg is
        WroteCursorReport (Err e) ->
            { model = model
            , command =
                crash 1 model.stderr 
                    "Failed to write cursor report request"
                    (Stream.errorToString e)
            }

        WroteCursorReport (Ok _) ->
            { model = model
            , command =
                Stream.read model.stdin
                    |> Task.attempt GotCursorReport
            }

        GotCursorReport (Err e) ->
            { model = model
            , command =
                crash 1 model.stderr
                    "Failed to read cursor report"
                    (Stream.errorToString e)
            }

        GotCursorReport (Ok bytes) ->
            let
                input =
                    bytesToInput bytes
            in
            when input is
                CursorReport { row, column } ->
                    { model = { model | firstRow = row }
                    , command =
                        Task.succeed {} |> Task.perform AppReady
                    }

                CtrlC ->
                    { model = model
                    , command = 
                        crash 1 model.stdout
                            "Received SIGINT"
                            "exiting"
                    }

                _ ->
                    { model = model
                    , command =
                        -- We got some other input before the cursor report.
                        -- Ignore it and try again.
                        Stream.writeStringAsBytes Ansi.getCursorReport model.stdout
                            |> Task.attempt WroteCursorReport
                    }

        AppReady _ ->
            { model = { model | appReady = True }
            , command =
                Cmd.batch
                    [ Cmd.map AppMsg model.appInitCmd
                    , Stream.read model.stdin
                        |> Task.attempt GotStdin
                    ]
            }

        GotStdin (Err e) ->
            { model = model
            , command =
                crash 1 model.stderr
                    "Failed reading input"
                    (Stream.errorToString e)
            }
                    
        GotStdin (Ok bytes) ->
            let
                input =
                    bytesToInput bytes

            in
            when input is
                CtrlC ->
                    { model = model
                    , command = 
                        crash 1 model.stdout
                            "Received SIGINT"
                            "exiting"
                    }

                _ ->
                    let
                        appUpdateReturn =
                            appUpdate
                                appConfig.update
                                (appConfig.onInput input)
                                model
                    in
                    { model = appUpdateReturn.model
                    , command =
                        Cmd.batch
                            [ appUpdateReturn.command
                            , Stream.read model.stdin
                                |> Task.attempt GotStdin
                            ]
                    }

        TerminalResized { rows, columns } ->
            let
                oldViewString =
                    UI.toString model.terminalCols model.oldView

                wrappedLines =
                    oldViewString
                        |> String.lines
                        |> Array.map Ansi.width
                        |> Array.any (\w -> w > columns)

                -- It's too complicated to work out how to adjust the firstRow
                -- calculation if lines wrapped. And depending on the terminal
                -- they may wrap before we receive this event, and if that
                -- scrolls the screen, our firstRow will be off, and we'll get
                -- phantom lines from previous renders. So for now, just clear
                -- the screen if lines wrapped :(

                newFirstRow =
                    if wrappedLines then
                        1
                    else
                        model.firstRow

                cmd =
                    if wrappedLines then
                        Task.execute <|
                            print 
                                model.stdout 
                                (Ansi.Screen.clear Ansi.Screen.full)
                    else
                        Cmd.none
            in
            { model =
                { model
                    | terminalRows = rows
                    , terminalCols = columns
                    , firstRow = newFirstRow
                    -- force a redraw
                    , oldView = UI.text [] ""
                }
            , command = cmd
            }

        AppMsg appMsg ->
            appUpdate appConfig.update appMsg model

        Tick _ ->
            view appConfig.view model


appUpdate :
    (appMsg -> appModel -> { model : appModel, command : Cmd appMsg })
    -> appMsg
    -> Model appModel appMsg
    -> { model : Model appModel appMsg, command : Cmd (Msg appMsg) }
appUpdate appUpdate_ appMsg model =
    let
        appUpdateResult =
            appUpdate_ appMsg model.appModel

        newModel =
            { model | appModel = appUpdateResult.model }
    in
    { model = newModel
    , command = 
        Cmd.map AppMsg appUpdateResult.command
    }


subscriptions : (appModel -> Sub appMsg) -> Model appModel appMsg -> Sub (Msg appMsg)
subscriptions appSubs model =
    Sub.batch
        [ Sub.map AppMsg (appSubs model.appModel)
        , if model.appReady then
            Time.every (1000 / framesPerSecond) Tick
          else
            Sub.none
        , when model.terminalPermission is
            Just termPermission ->
                Terminal.onResize termPermission TerminalResized
            Nothing ->
                Sub.none
        ]


-- Tasks


{-| Task to hide the cursor.

Here's an example of using it in init to hide the cursor as soon as the program starts:

    init env =
        Node.startProgram
            { model = {}
            , command = 
                Tui.hideCursor env.stdout
                    |> Task.execute
            }

-}
hideCursor : Stream.Writable Bytes-> Task Never {}
hideCursor stdout =
    Ansi.hideCursor
        |> print stdout


{-| Task that exits the program.

The Stream argument should be the stdout value you get from [`Environment`](#Environment).
This is needed to clean things up (e.g. restore cursor, unset styles, etc).

The program will exit with a 0 status code.
If you want something other than zero, use [`exitWithCode`](#exitWithCode).

Here's an example of using it in your update function to exit when the user presses the escape key:

    when input is
        Tui.Escape ->
            { model = model
            , command = 
                Tui.exit model.stdout
                    |> Task.execute
            }

-}
exit : Stream.Writable Bytes -> Task Never {}
exit stdout =
    cleanup stdout
        |> Task.andThen (\_ -> Node.exit)


{-| Task that exits the program with a specific exit code.

The Stream argument should be the stdout value you get from [`Environment`](#Environment).
This is needed to clean things up (e.g. restore cursor, unset styles, etc).
-}
exitWithCode : Stream.Writable Bytes -> Int -> Task Never {}
exitWithCode stream code =
    cleanup stream
        |> Task.andThen (\_ -> Node.exitWithCode code)


crash : Int -> Stream.Writable Bytes -> String -> String -> Cmd (Msg appMsg)
crash status stream error explanation =
    print stream (error ++ ": " ++ explanation)
        |> Task.andThen (\_ -> exitWithCode stream status)
        |> Task.execute


cleanup : Stream.Writable Bytes -> Task Never {}
cleanup stream =
    "\n" ++ Ansi.reset ++ Ansi.showCursor
        |> print stream


-- VIEW


view : 
    (appModel -> UI.Element)
    -> Model appModel appMsg
    -> { model : Model appModel appMsg, command : Cmd (Msg appMsg) }
view appView model =
    let
        element =
            appView model.appModel
    in
    if element == model.oldView then
        { model = model
        , command = Cmd.none
        }
    else
        let
            lines =
                UI.toString model.terminalCols element
                    |> String.lines

            numLines =
                lines
                    |> Array.length

            viewString =
                lines
                    |> Array.map (String.append (Ansi.Screen.clearLine Ansi.Screen.after))
                    |> String.join "\n"

            newFirstRow =
                adjustFirstRow model numLines
        in
        { model = 
            { model 
                | firstRow = newFirstRow 
                , oldView = element
            }
        , command = 
            Task.execute (render model viewString)
        }


render : Model appModel appMsg -> String -> Task Never {}
render model viewString =
    -- IMPORTANT!
    --   * Draw over the old view, don't clear then draw, or you'll get screen flicker.
    --   * Draw from the model's OLD first row, or you'll draw over non-tui terminal lines instead of scrolling.
    viewString
        |> String.prepend (Ansi.moveTo model.firstRow 0)
        |> String.append (Ansi.Screen.clear Ansi.Screen.after)
        |> print model.stdout


-- INPUT


{-| Value sent to your `onInput` message when the program receives input
(a key is pressed, a signal is received, etc.)

Your program will receive keyboard input as the keys are pressed, as
opposed to getting a bunch of characters after Enter is pressed (under the hood
your terminal program is running in "raw mode"). For example, if someone types
"hi" after starting your program, it will receive a message with `KeyChar "h"`
and then another message with `KeyChar "i"`.

`CursorReport` is a special input type you will receive if you include
[`Ansi.getCursorReport`](https://packages.gren-lang.org/package/blaix/gren-ansi/version/2/module/Ansi#getCursorReport)
in your output. Use this to get the current row and column position of the cursor in the terminal
(where the upper-left corner of the window is row 1 column 1).

`CtrlC` is the "abort" signal and gets intercepted by gren-tui to exit your
program. For now you can't depend on receiving this in your app.
-}
type Input
    = KeyChar String
    | Tab
    | Space
    | Return
    | Escape
    | ArrowUp
    | ArrowDown
    | ArrowLeft
    | ArrowRight
    | CursorReport { row : Int, column : Int }
    | CtrlC
    | F1
    | F2
    | F3
    | F4
    | UnknownInput

    -- Technically, according to the names of the ansi escape codes:
    --  * backspace = move cursor back but don't delete
    --  * delete = delete backwards (what the backspace key usually does)
    --  * forward delete = delete forwards (what the del key usually does)
    -- But I'm naming the inputs below according to what usually happens with
    -- the keyboard key names, not the ansi code names. So:
    --  * Backspace = delete (backwards)
    --  * Delete = forward delete
    | Backspace
    | Delete


ctrlC =
    Bytes.Encode.encode (Bytes.Encode.unsignedInt8 3)


backspace =
    Bytes.Encode.encode (Bytes.Encode.unsignedInt8 127)


bytesToInput : Bytes -> Input
bytesToInput bytes =
    if bytes == ctrlC then
        CtrlC
    else if bytes == backspace then
        Backspace
    else
        bytes
            |> Bytes.toString
            |> Maybe.map stringToInput
            |> Maybe.withDefault UnknownInput


stringToInput : String -> Input
stringToInput string =
    when checkCursorReport string is
        Just cursorReport ->
            cursorReport
        Nothing ->
            if string == Ansi.arrowUp then
                ArrowUp
            else if string == Ansi.arrowDown then
                ArrowDown
            else if string == Ansi.arrowRight then
                ArrowRight
            else if string == Ansi.arrowLeft then
                ArrowLeft
            else if string == Ansi.f1 then
                F1
            else if string == Ansi.f2 then
                F2
            else if string == Ansi.f3 then
                F3
            else if string == Ansi.f4 then
                F4
            else if string == Ansi.escape then
                Escape
            else if string == Ansi.escape ++ "[3~" then
                Delete
            else if string == "\t" then
                Tab
            else if string == "\r" then
                Return
            else if string == " " then
                Space
            else
                KeyChar string


inputToString : Input -> String
inputToString input =
    when input is
        KeyChar key ->
            "Key: " ++ key

        Tab ->
            "Tab key"

        Space ->
            "Space key"

        Backspace ->
            "Backspace key"

        Delete ->
            "Delete key"

        Return ->
            "Return key"

        Escape ->
            "Escape key"

        ArrowUp ->
            "Up arrow"

        ArrowDown ->
            "Down arrow"

        ArrowLeft ->
            "Left arrow"

        ArrowRight ->
            "Right error"

        F1 ->
            "F1 key"

        F2 ->
            "F2 key"

        F3 ->
            "F3 key"

        F4 ->
            "F4 key"

        CursorReport { row, column } ->
            let
                { r, c } =
                    { r = String.fromInt row
                    , c = String.fromInt column
                    }
            in
            "Cursor report: row=" ++ r ++ " column=" ++ c

        CtrlC ->
            "Ctrl-C (SIGINT)"

        UnknownInput ->
            "Unknown input"


checkCursorReport : String -> Maybe Input
checkCursorReport string =
    -- If we send Ansi.getCursorReport, we get back the cursor position (CPR)
    -- in the form ESC[n;mR, where n is the row and m is the column. 
    -- Using this to know where to move when clearing the screen on update.
    let
        parts =
            string
                |> String.split "["
                |> Array.map (String.split ";")
                |> Array.flatten
                |> Array.map (String.split "R")
                |> Array.flatten
    in
    when parts is
        [ "\u{001b}", row, col, "" ] ->
            let
                parsed =
                    { row = String.toInt row
                    , col = String.toInt col
                    }
            in
            when parsed is
                { row = Just r, col = Just c } ->
                    Just (CursorReport { row = r, column = c })
                _ ->
                    Nothing
        _ ->
            Nothing


-- UTIL


{-| Adjust first row to account for scrolling.
-}
adjustFirstRow : Model appModel appMsg -> Int -> Int
adjustFirstRow model numLines =
    let
        scrolledRows =
            model.firstRow + numLines - 1 - model.terminalRows

        firstRowAdjusted =
            if scrolledRows > 0 then
                model.firstRow - scrolledRows
            else
                model.firstRow
    in
    if firstRowAdjusted < 1 then
        1
    else
        firstRowAdjusted


{-| Mimic the old Stream.sendString behavior:

Write to the stream, resolve to nothing, and ignore errors.
With the order of arguments appropriate for chaining (stream -> string instead of string -> stream).

I should probably eventually handle failures better...
-}
print : Stream.Writable Bytes -> String -> Task Never {}
print stream string =
    Stream.writeStringAsBytes string stream
        |> Task.map (\_ -> {})
        |> Task.onError (\_ -> Task.succeed {})


{-| Mimic the old Stream.sendLine behavior:

Write to the stream, resolve to nothing, and ignore errors.
With the order of arguments appropriate for chaining (stream -> string instead of string -> stream).

I should probably eventually handle failures better...
-}
printLine : Stream.Writable Bytes -> String -> Task Never {}
printLine stream string =
    Stream.writeLineAsBytes string stream
        |> Task.map (\_ -> {})
        |> Task.onError (\_ -> Task.succeed {})
